{"version":3,"sources":["components/search.js","static/smalltalk.js","components/result.js","App.js","index.js"],"names":["Search","updateCoords","id","className","publicKey","inputClass","onSuggestionSelect","result","lat","lon","resetSearch","smalltalk","low","med","high","randomPercent","Math","floor","random","Result","data","useState","smalltalks","setSmalltalks","getRandFromArray","arr","length","useEffect","weather","d","st","temp","push","console","log","getSmalltalk","city_name","country_code","src","icon","alt","description","map","s","i","key","App","coords","setCoords","setData","c","url","fetch","then","res","json","catch","err","getWeatherData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAyBeA,EApBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAOhB,OACE,yBAAKC,GAAG,WAAWC,UAAU,oBAC3B,4CACA,kBAAC,IAAD,CACEC,UAAS,aAbL,iGAcJC,WAAW,SACXC,mBAVqB,SAACC,EAAQC,EAAKC,GACvCR,EAAa,CAACO,MAAKC,SAUfC,aAAa,MCnBRC,EA+DL,CACJC,IAAK,CACH,wBACA,4DACA,0DAEFC,IAAK,CACH,iCACA,mDAEFC,KAAM,CACJ,2ECrBAC,EAAgB,WAEpB,OAAOC,KAAKC,MAAM,GAAAD,KAAKE,SAA4B,IAAM,KAE5CC,EApDA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACSC,mBAAS,CAAC,MADnB,mBACpBC,EADoB,KACRC,EADQ,KAqBrBC,EAAmB,SAACC,GAC1B,OAAOA,EAAIT,KAAKC,MAAMD,KAAKE,SAAWO,EAAIC,UAO1C,OALAC,qBAAU,WACJP,EAAKQ,SACPL,EAvBiB,SAACM,GACpB,IAAIC,EAAK,GAaT,OAVGD,EAAEE,KAAO,GACVD,EAAGE,KAAKR,EAAiBb,EAAeC,MAC9BiB,EAAEE,MAAQ,IAAMF,EAAEE,MAAQ,GACpCD,EAAGE,KAAKR,EAAiBb,EAAeE,MAExCiB,EAAGE,KAAKR,EAAiBb,EAAeG,OAE1CmB,QAAQC,IAAIJ,GAGLA,EASSK,CAAaf,MAE5B,CAACA,IACGA,EAAKQ,QACV,yBAAKzB,UAAU,oBACb,0CAAgBiB,EAAKgB,UAArB,KAAkChB,EAAKiB,cACvC,yBAAKlC,UAAU,YACb,yBAAKmC,IAAG,UAnCK,+CAmCL,OAAoBlB,EAAKQ,QAAQW,KAAjC,QAA6CC,IAAI,KACzD,2BAAIpB,EAAKW,KAAT,UAEF,2BAAIX,EAAKQ,QAAQa,aACjB,4BAAK1B,IAAL,2CACA,4BACGO,EAAWoB,KAAI,SAACC,EAAEC,GAAH,OACd,wBAAIC,IAAKD,GAAT,IAAcD,EAAd,UAIJ,MCCSG,MA1Cf,WAAgB,IAAD,EACezB,mBAAS,IADxB,mBACN0B,EADM,KACEC,EADF,OAEW3B,mBAAS,IAFpB,mBAEND,EAFM,KAEA6B,EAFA,KA4Bb,OANAtB,qBAAU,WACO,KAAXoB,GAfiB,SAACG,GACtB,GAAIH,EAAOvC,IAAK,CACdyB,QAAQC,IAAR,+BAAoCgB,IACpC,IAAMC,EAAG,UAdE,0CAcF,eAbH,mCAaG,gBAAgCD,EAAE1C,IAAlC,gBAA6C0C,EAAEzC,KACxD2C,MAAMD,GACLE,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAjC,GACJ6B,EAAQ7B,EAAKA,KAAK,IAClBa,QAAQC,IAAId,EAAKA,KAAK,OAEvBoC,OAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,OAM1BC,CAAeX,KAEhB,CAACA,IAGF,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,yCACA,8FAEF,kBAAC,EAAD,CAAQF,aA/BO,SAACiD,GACpBF,EAAUE,MA+BN,kBAAC,EAAD,CAAQ9B,KAAMA,OCvCtBuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9db23908.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete'\n\nconst sec = \"eyJ1IjoiY2xhaXJlZnJvZnJvIiwiYSI6ImNrYnRsYnJvNTBhNzUyeW53OXBkNGF0bncifQ.x0Vx7b94vpi_T9YEmDpsnw\"\n\nconst Search = ({ updateCoords }) => {\n\n\n  const onSuggestionSelect = (result, lat, lon,) => {\n    updateCoords({lat, lon})\n  }\n\n  return (\n    <div id=\"geocoder\" className=\"search-container\">\n      <h2>Find a place</h2>\n      <MapboxAutocomplete\n        publicKey={`pk.${sec}`}\n        inputClass='search'\n        onSuggestionSelect={onSuggestionSelect}\n        resetSearch={false}\n      />\n    </div>\n  )\n}\n\nexport default Search;\n","export const smalltalk = {\n  weather: [\n    {\n      phrase: \"Pouring cats and dogs lately!\",\n      tags: [\"rain\", \"shower\"]\n    },\n    {\n      phrase: \"Lovely day isn't it!\",\n      tags: [\"rain\", \"shower\"]\n    },\n    {\n      phrase: \"It doesn’t look like it’s going to stop raining today.\",\n      tags: [\"rain\", \"shower\", \"drizzle\"]\n    },\n    {\n      phrase: \"At least my tomatoes will be happy.\",\n      tags: [\"rain\", \"shower\", \"drizzle\"]\n    },\n    {\n      phrase: \"Well, I’ve heard it’s worse in the west. They’ve had terrible flooding.\",\n      tags: [\"sleet\", \"smoke\", \"haze\", \"showers\", \"hail\"]\n    },\n    {\n      phrase: \"It’s going to rain by the looks of it.\",\n      tags: [\"clouds\"]\n    },\n    {\n      phrase: \"Looks like the sun's trying to come out\",\n      tags: [\"clouds\", \"drizzle\"]\n    },\n    {\n      phrase: \"It's finally decided to rain\",\n      tags: [\"rain\", \"showers\"]\n    },\n    {\n      phrase: \"Crazy weather we're having!\",\n      tags: [\"showers\", \"hail\", \"sleet\"]\n    },\n    {\n      phrase: \"Crazy weather we're having!\",\n      tags: [\"showers\", \"hail\", \"sleet\"]\n    },\n    {\n      phrase: \"All of this loud thunder is making my dog very nervous.\",\n      tags: [\"thunder\"]\n    },\n    {\n      phrase: \"Finally I can get that tan\",\n      tags: [\"clear\"]\n    },\n    {\n      phrase: \"The clouds look ominous.\",\n      tags: [\"clouds\"]\n    },\n    {\n      phrase: \"It’s beautiful outside. Do you have any plans?\",\n      tags: [\"clear\"]\n    },\n    {\n      phrase : \"Did you order this sunshine?\",\n      tags: [\"clear\"] \n    }\n  ],\n  temp: {\n    low: [\n      \"A bit bippy today eh?\",\n      \"It’s freezing today! Hopefully it doesn’t snow.\",\n      \"It sure would be nice to be in Hawaii right about now.\"\n    ],\n    med: [\n      \"Lovely day for tennis I do say\",\n      \"We couldn’t ask for a nicer day, could we?\"\n    ],\n    high: [\n      \"Wow, it’s so hot outside today, I’ve been sweating non-stop!\",\n    ],\n  }\n\n}\n","import React, { useState, useEffect } from 'react'\n\nimport {smalltalk} from '../static/smalltalk'\nconst iconEndpoint = 'https://www.weatherbit.io/static/img/icons/'\n\nconst Result = ({ data }) => {\n  const [smalltalks, setSmalltalks] = useState(['s'])\n\n  const getSmalltalk = (d) => {\n    let st = []\n\n    // get temp based smalltalk\n    if(d.temp < 18) {\n      st.push(getRandFromArray(smalltalk.temp.low))\n    } else if ( d.temp >= 18 && d.temp <= 29) {\n      st.push(getRandFromArray(smalltalk.temp.med))\n    } else {\n      st.push(getRandFromArray(smalltalk.temp.high))\n    }\n    console.log(st)\n    // get weather based smalltalk\n\n    return st\n\n  }\n\n  const getRandFromArray = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n  }\n  useEffect(()=> {\n    if (data.weather) {\n      setSmalltalks(getSmalltalk(data))\n    }\n  }, [data])\n  return data.weather ? (\n    <div className=\"result-container\">\n      <h2>Weather in {data.city_name}, {data.country_code}</h2>\n      <div className=\"icon-box\">\n        <img src={`${iconEndpoint}${data.weather.icon}.png`} alt=\"\"/>\n        <p>{data.temp}°C</p>\n      </div>\n      <p>{data.weather.description}</p>\n      <h2>{randomPercent()} chance of hearing this from strangers:</h2>\n      <ul>\n        {smalltalks.map((s,i)=> (\n          <li key={i}>\"{s}\"</li>\n        ))}\n      </ul>\n    </div>\n  ) : null\n\n}\n\nconst randomPercent = () => {\n  // between 61 and 100\n  return Math.floor(Math.random() * (101 - 61 + 1) + 61) + \"%\";\n}\nexport default Result;\n","import React, { useState, useEffect } from 'react'\n\nimport Search from './components/search'\nimport Result from './components/result'\n\nconst endpoint = 'https://api.weatherbit.io/v2.0/current?'\nconst key = 'fdb84bad1ce344ad8a664672b46d3cac'\n\nfunction App() {\n  const [coords, setCoords] = useState({})\n  const [data, setData] = useState({})\n\n  const updateCoords = (c) => {\n    setCoords(c)\n  }\n\n  const getWeatherData = (c) => {\n    if (coords.lat) {\n      console.log(`getting weather from ${c}`)\n      const url = `${endpoint}key=${key}&lat=${c.lat}&lon=${c.lon}`\n      fetch(url)\n      .then(res=> res.json())\n      .then(data=> {\n        setData(data.data[0])\n        console.log(data.data[0])\n      })\n      .catch(err => console.log(err))\n    }\n  }\n\n  useEffect(() => {\n    if (coords !== '') {\n      getWeatherData(coords)\n    }\n  }, [coords])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>SmallTalk</h1>\n          <h3>The premiere forecaster of conversations you don't care about</h3>\n        </div>\n        <Search updateCoords={updateCoords} />\n        <Result data={data}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}